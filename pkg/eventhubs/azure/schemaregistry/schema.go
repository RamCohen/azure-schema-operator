package schemaregistry

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"net/http"

	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
)

// SchemaClient is the azure Schema Registry is as a central schema repository, with support for versioning,
// management, compatibility checking, and RBAC.
type SchemaClient struct {
	BaseClient
}

// NewSchemaClient creates an instance of the SchemaClient client.
func NewSchemaClient(endpoint string) SchemaClient {
	return SchemaClient{New(endpoint)}
}

// GetByID gets a registered schema by its unique ID.  Azure Schema Registry guarantees that ID is unique within a
// namespace. Operation response type is based on serialization of schema requested.
// Parameters:
// ID - references specific schema in registry namespace.
func (client SchemaClient) GetByID(ctx context.Context, ID string) (result Schema, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SchemaClient.GetByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetByIDPreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "GetByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "GetByID", resp, "Failure sending request")
		return
	}

	result, err = client.GetByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "GetByID", resp, "Failure responding to request")
		return
	}

	return
}

// GetByIDPreparer prepares the GetByID request.
func (client SchemaClient) GetByIDPreparer(ctx context.Context, ID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	const APIVersion = "2021-10"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("https://{endpoint}", urlParameters),
		autorest.WithPathParameters("/$schemaGroups/$schemas/{id}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByIDSender sends the GetByID request. The method will close the
// http.Response Body if it receives an error.
func (client SchemaClient) GetByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByIDResponder handles the response to the GetByID request. The method always
// closes the http.Response Body.
func (client SchemaClient) GetByIDResponder(resp *http.Response) (result Schema, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetVersions gets the list of all versions of one schema.
// Parameters:
// groupName - schema group under which schema is registered.  Group's serialization type should match the
// serialization type specified in the request.
// schemaName - name of schema.
func (client SchemaClient) GetVersions(ctx context.Context, groupName string, schemaName string) (result SchemaVersions, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SchemaClient.GetVersions")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: schemaName,
			Constraints: []validation.Constraint{{Target: "schemaName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "schemaName", Name: validation.Pattern, Rule: `^[A-Za-z0-9][^\\/$:]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("schemaregistry.SchemaClient", "GetVersions", err.Error())
	}

	req, err := client.GetVersionsPreparer(ctx, groupName, schemaName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "GetVersions", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetVersionsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "GetVersions", resp, "Failure sending request")
		return
	}

	result, err = client.GetVersionsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "GetVersions", resp, "Failure responding to request")
		return
	}

	return
}

// GetVersionsPreparer prepares the GetVersions request.
func (client SchemaClient) GetVersionsPreparer(ctx context.Context, groupName string, schemaName string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"groupName":  autorest.Encode("path", groupName),
		"schemaName": autorest.Encode("path", schemaName),
	}

	const APIVersion = "2021-10"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("https://{endpoint}", urlParameters),
		autorest.WithPathParameters("/$schemaGroups/{groupName}/schemas/{schemaName}/versions", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetVersionsSender sends the GetVersions request. The method will close the
// http.Response Body if it receives an error.
func (client SchemaClient) GetVersionsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetVersionsResponder handles the response to the GetVersions request. The method always
// closes the http.Response Body.
func (client SchemaClient) GetVersionsResponder(resp *http.Response) (result SchemaVersions, err error) {

	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// QueryIDByContent gets the ID referencing an existing schema within the specified schema group, as matched by schema
// content comparison.
// Parameters:
// groupName - schema group under which schema is registered.  Group's serialization type should match the
// serialization type specified in the request.
// schemaName - name of schema.
// schemaContent - string representation (UTF-8) of the registered schema.
func (client SchemaClient) QueryIDByContent(ctx context.Context, groupName string, schemaName string, schemaContent string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SchemaClient.QueryIDByContent")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: schemaName,
			Constraints: []validation.Constraint{{Target: "schemaName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "schemaName", Name: validation.Pattern, Rule: `^[A-Za-z0-9][^\\/$:]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("schemaregistry.SchemaClient", "QueryIDByContent", err.Error())
	}

	req, err := client.QueryIDByContentPreparer(ctx, groupName, schemaName, schemaContent)
	if err != nil {
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "QueryIDByContent", nil, "Failure preparing request")
		return
	}

	resp, err := client.QueryIDByContentSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "QueryIDByContent", resp, "Failure sending request")
		return
	}

	result, err = client.QueryIDByContentResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "QueryIDByContent", resp, "Failure responding to request")
		return
	}

	return
}

// QueryIDByContentPreparer prepares the QueryIDByContent request.
func (client SchemaClient) QueryIDByContentPreparer(ctx context.Context, groupName string, schemaName string, schemaContent string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"groupName":  autorest.Encode("path", groupName),
		"schemaName": autorest.Encode("path", schemaName),
	}

	const APIVersion = "2021-10"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; serialization=Avro; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("https://{endpoint}", urlParameters),
		autorest.WithPathParameters("/$schemaGroups/{groupName}/schemas/{schemaName}:get-id", pathParameters),
		autorest.WithJSON(schemaContent),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// QueryIDByContentSender sends the QueryIDByContent request. The method will close the
// http.Response Body if it receives an error.
func (client SchemaClient) QueryIDByContentSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// QueryIDByContentResponder handles the response to the QueryIDByContent request. The method always
// closes the http.Response Body.
func (client SchemaClient) QueryIDByContentResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Register register new schema. If schema of specified name does not exist in specified group, schema is created at
// version 1. If schema of specified name exists already in specified group, schema is created at latest version + 1.
// Parameters:
// groupName - schema group under which schema should be registered.  Group's serialization type should match
// the serialization type specified in the request.
// schemaName - name of schema.
// schemaContent - string representation (UTF-8) of the schema being registered.
func (client SchemaClient) Register(ctx context.Context, groupName string, schemaName string, schemaContent string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SchemaClient.Register")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: schemaName,
			Constraints: []validation.Constraint{{Target: "schemaName", Name: validation.MaxLength, Rule: 50, Chain: nil},
				{Target: "schemaName", Name: validation.Pattern, Rule: `^[A-Za-z0-9][^\\/$:]*$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("schemaregistry.SchemaClient", "Register", err.Error())
	}

	req, err := client.RegisterPreparer(ctx, groupName, schemaName, schemaContent)
	if err != nil {
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "Register", nil, "Failure preparing request")
		return
	}

	resp, err := client.RegisterSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "Register", resp, "Failure sending request")
		return
	}

	result, err = client.RegisterResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "schemaregistry.SchemaClient", "Register", resp, "Failure responding to request")
		return
	}

	return
}

// RegisterPreparer prepares the Register request.
func (client SchemaClient) RegisterPreparer(ctx context.Context, groupName string, schemaName string, schemaContent string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"groupName":  autorest.Encode("path", groupName),
		"schemaName": autorest.Encode("path", schemaName),
	}

	const APIVersion = "2021-10"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; serialization=Avro; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("https://{endpoint}", urlParameters),
		autorest.WithPathParameters("/$schemaGroups/{groupName}/schemas/{schemaName}", pathParameters),
		autorest.WithJSON(schemaContent),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RegisterSender sends the Register request. The method will close the
// http.Response Body if it receives an error.
func (client SchemaClient) RegisterSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RegisterResponder handles the response to the Register request. The method always
// closes the http.Response Body.
func (client SchemaClient) RegisterResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}
