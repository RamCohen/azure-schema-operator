package schemaregistry

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"io"

	"github.com/Azure/go-autorest/autorest"
)

// The package's fully qualified name.
const fqdn = "./azure/schemaregistry"

// Error an error response returned from Azure Schema Registry service.
type Error struct {
	Error *ErrorDetail `json:"error,omitempty"`
}

// ErrorDetail error response returned from Azure Schema Registry service.
type ErrorDetail struct {
	// Code - Type of error.
	Code *string `json:"code,omitempty"`
	// Message - Brief description of error.
	Message *string `json:"message,omitempty"`
	// Details - Error message details to help user understand/debug failure.
	Details *[]ErrorDetail `json:"details,omitempty"`
}

// ReadCloser ...
type ReadCloser struct {
	autorest.Response `json:"-"`
	Value             *io.ReadCloser `json:"value,omitempty"`
}

// SchemaGroups array received from the registry containing the list of schema groups.
type SchemaGroups struct {
	autorest.Response `json:"-"`
	// SchemaGroups - Array of schema groups.
	SchemaGroups *[]string `json:"schemaGroups,omitempty"`
}

// SchemaID object received from the registry containing schema identifiers.
type SchemaID struct {
	// ID - Schema ID that uniquely identifies a schema in the registry namespace.
	ID *string `json:"id,omitempty"`
}

// SchemaVersions array received from the registry containing the list of versions for specific schema.
type SchemaVersions struct {
	autorest.Response `json:"-"`
	// SchemaVersions - Array of schema groups.
	SchemaVersions *[]int32 `json:"schemaVersions,omitempty"`
	Versions       *[]int32 `json:"Value,omitempty"`
}

// Schema object represents the schema entry in the eventhub schema registry
type Schema struct {
	autorest.Response `json:"-"`
	Name              string        `json:"name"`
	Namespace         string        `json:"namespace"`
	Type              string        `json:"type"`
	Fields            []interface{} `json:"fields"`
}
